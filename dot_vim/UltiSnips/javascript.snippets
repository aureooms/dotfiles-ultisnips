# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt

snippet co "const assignment" b
const ${1} = ${2}
endsnippet

snippet lt "const assignment" b
let ${1} = ${2}
endsnippet

snippet ld "Lambda expression" w
(${1}) => ${2}
endsnippet

snippet nf "Function definition" b
function ${1}(${2}) {
	${3}
}
endsnippet

snippet uf "Anonymous Function" w
function (${1}) {
	${2}
}
endsnippet

snippet ru "Return" b
return ${1};
endsnippet

snippet fl "For loop" b
for (${1}; ${2}; ${3}) {
	${4}
}
endsnippet

snippet lt "<" w
< ${1}
endsnippet

snippet le "<=" w
<= ${1}
endsnippet

snippet gt ">" w
> ${1}
endsnippet

snippet ge ">=" w
>= ${1}
endsnippet

snippet eq "===" w
=== ${1}
endsnippet

snippet ne "!==" w
!== ${1}
endsnippet

snippet inc "++" w
++${1}
endsnippet

snippet dec "--" w
--${1}
endsnippet

snippet while "while (condition) { ... }"
while (${1:true}) {
	${VISUAL}$0
}
endsnippet

snippet if "if (condition) { ... }"
if (${1:true}) {
	${VISUAL}$0
}
endsnippet

snippet ife "if (condition) { ... } else { ... }"
if (${1:true}) {
	${VISUAL}$0
} else {
	${2}
}
endsnippet

snippet switch
switch (${VISUAL}${1:expression}) {
	case '${VISUAL}${3:case}':
		${4}
		break;
	${0}
	default:
		${2}
}
endsnippet

snippet case "case 'xyz': ... break"
case '${VISUAL}${1:case}':
	${VISUAL}$0
	break;
endsnippet

snippet do "do { ... } while (condition)"
do {
	${VISUAL}$0
} while(${1:/* condition */});
endsnippet

# https://github.com/honza/vim-snippets/blob/master/UltiSnips/javascript_react.snippets
snippet cof "react function component" b
import React from "react";

const `!p snip.rv = snip.basename` = (${1}) => {
	${2}
};

export default `!p snip.rv = snip.basename`;
endsnippet

snippet useS "useState Hook" b
const [${1}, set`!p snip.rv=t[1].title()`] = useState(${2:"${3}"})
endsnippet

snippet useE "useEffect Hook" b
useEffect(() => {
	${1:${0}}
		}${2})
endsnippet

snippet useC "useContext Hook" b
const ${1:context} = useContext(${2})
endsnippet

snippet useRe "useReducer Hook" b
const [${3:state}, ${4:dispatch}] = useReducer(${5:reducer}, ${2:initial_value})
endsnippet

snippet useCB "useCallback(fn, inputs)" b
const ${1:callback} = useCallback((${2})) => ${3:{
	${4}
}}, [${5}])
endsnippet

snippet useM "useMemo(fn, inputs)" b
const ${1:memorized} = useMemo(() => ${2:{
	${3}
}}, [${4}])
endsnippet

snippet useR "useRef(defaultValue)" b
const ${1:ref} = useRef(${2:null})
endsnippet

snippet t "tag" w
<${1}
	${3}
>
	${2}
</`!p snip.rv = t[1]`>
${4}
endsnippet
